// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_boilerplate/test/helpers/test_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:dio/dio.dart' as _i2;
import 'package:flutter_bloc/flutter_bloc.dart' as _i18;
import 'package:flutter_boilerplate/core/network/api_client.dart' as _i9;
import 'package:flutter_boilerplate/core/services/local_storage_service.dart'
    as _i7;
import 'package:flutter_boilerplate/core/utils/base_usecase.dart' as _i22;
import 'package:flutter_boilerplate/core/utils/resources.dart' as _i5;
import 'package:flutter_boilerplate/core/utils/result.dart' as _i11;
import 'package:flutter_boilerplate/features/auth/domain/entities/user.dart'
    as _i20;
import 'package:flutter_boilerplate/features/auth/domain/usecases/login_usecase.dart'
    as _i19;
import 'package:flutter_boilerplate/features/auth/domain/usecases/logout_usecase.dart'
    as _i21;
import 'package:flutter_boilerplate/features/auth/presentation/bloc/auth_bloc.dart'
    as _i6;
import 'package:flutter_boilerplate/features/todos/data/datasources/todo_remote_datasource.dart'
    as _i14;
import 'package:flutter_boilerplate/features/todos/data/models/todo_model.dart'
    as _i3;
import 'package:flutter_boilerplate/features/todos/domain/entities/todo.dart'
    as _i12;
import 'package:flutter_boilerplate/features/todos/domain/repositories/todo_repository.dart'
    as _i10;
import 'package:flutter_boilerplate/features/todos/domain/usecases/get_todo_by_id.dart'
    as _i16;
import 'package:flutter_boilerplate/features/todos/domain/usecases/get_todos.dart'
    as _i15;
import 'package:flutter_boilerplate/features/todos/domain/usecases/update_todo.dart'
    as _i17;
import 'package:flutter_boilerplate/features/todos/presentation/bloc/todos_bloc.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0<T1> extends _i1.SmartFake implements _i2.Response<T1> {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoModel_1 extends _i1.SmartFake implements _i3.TodoModel {
  _FakeTodoModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodosState_2 extends _i1.SmartFake implements _i4.TodosState {
  _FakeTodosState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResource_3<T> extends _i1.SmartFake implements _i5.Resource<T> {
  _FakeResource_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthState_4 extends _i1.SmartFake implements _i6.AuthState {
  _FakeAuthState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageService extends _i1.Mock
    implements _i7.LocalStorageService {
  MockLocalStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> setLoggedIn(bool? isLoggedIn) => (super.noSuchMethod(
        Invocation.method(
          #setLoggedIn,
          [isLoggedIn],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> isLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #isLoggedIn,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> setUserData(Map<String, dynamic>? userData) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserData,
          [userData],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<Map<String, dynamic>?> getUserData() => (super.noSuchMethod(
        Invocation.method(
          #getUserData,
          [],
        ),
        returnValue: _i8.Future<Map<String, dynamic>?>.value(),
      ) as _i8.Future<Map<String, dynamic>?>);

  @override
  _i8.Future<bool> clearUserData() => (super.noSuchMethod(
        Invocation.method(
          #clearUserData,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<String?> getString(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getString,
          [key],
        ),
        returnValue: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> getBool(
    String? key, {
    bool? defaultValue = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBool,
          [key],
          {#defaultValue: defaultValue},
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<int> getInt(
    String? key, {
    int? defaultValue = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInt,
          [key],
          {#defaultValue: defaultValue},
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i9.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Response<T>> get<T>(
    String? path, {
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_0<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> post<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_0<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> put<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_0<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);

  @override
  _i8.Future<_i2.Response<T>> delete<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i2.Response<T>>.value(_FakeResponse_0<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i2.Response<T>>);
}

/// A class which mocks [TodoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRepository extends _i1.Mock implements _i10.TodoRepository {
  MockTodoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i11.Result<List<_i12.Todo>>> getTodos() => (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [],
        ),
        returnValue: _i8.Future<_i11.Result<List<_i12.Todo>>>.value(
            _i13.dummyValue<_i11.Result<List<_i12.Todo>>>(
          this,
          Invocation.method(
            #getTodos,
            [],
          ),
        )),
      ) as _i8.Future<_i11.Result<List<_i12.Todo>>>);

  @override
  _i8.Future<_i11.Result<_i12.Todo>> getTodoById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodoById,
          [id],
        ),
        returnValue: _i8.Future<_i11.Result<_i12.Todo>>.value(
            _i13.dummyValue<_i11.Result<_i12.Todo>>(
          this,
          Invocation.method(
            #getTodoById,
            [id],
          ),
        )),
      ) as _i8.Future<_i11.Result<_i12.Todo>>);

  @override
  _i8.Future<_i11.Result<_i12.Todo>> createTodo(_i12.Todo? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTodo,
          [todo],
        ),
        returnValue: _i8.Future<_i11.Result<_i12.Todo>>.value(
            _i13.dummyValue<_i11.Result<_i12.Todo>>(
          this,
          Invocation.method(
            #createTodo,
            [todo],
          ),
        )),
      ) as _i8.Future<_i11.Result<_i12.Todo>>);

  @override
  _i8.Future<_i11.Result<_i12.Todo>> updateTodo(_i12.Todo? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [todo],
        ),
        returnValue: _i8.Future<_i11.Result<_i12.Todo>>.value(
            _i13.dummyValue<_i11.Result<_i12.Todo>>(
          this,
          Invocation.method(
            #updateTodo,
            [todo],
          ),
        )),
      ) as _i8.Future<_i11.Result<_i12.Todo>>);

  @override
  _i8.Future<_i11.Result<void>> deleteTodo(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [id],
        ),
        returnValue: _i8.Future<_i11.Result<void>>.value(
            _i13.dummyValue<_i11.Result<void>>(
          this,
          Invocation.method(
            #deleteTodo,
            [id],
          ),
        )),
      ) as _i8.Future<_i11.Result<void>>);
}

/// A class which mocks [TodoRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRemoteDataSource extends _i1.Mock
    implements _i14.TodoRemoteDataSource {
  MockTodoRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i3.TodoModel>> getTodos() => (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [],
        ),
        returnValue: _i8.Future<List<_i3.TodoModel>>.value(<_i3.TodoModel>[]),
      ) as _i8.Future<List<_i3.TodoModel>>);

  @override
  _i8.Future<_i3.TodoModel> getTodoById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getTodoById,
          [id],
        ),
        returnValue: _i8.Future<_i3.TodoModel>.value(_FakeTodoModel_1(
          this,
          Invocation.method(
            #getTodoById,
            [id],
          ),
        )),
      ) as _i8.Future<_i3.TodoModel>);

  @override
  _i8.Future<_i3.TodoModel> createTodo(_i3.TodoModel? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTodo,
          [todo],
        ),
        returnValue: _i8.Future<_i3.TodoModel>.value(_FakeTodoModel_1(
          this,
          Invocation.method(
            #createTodo,
            [todo],
          ),
        )),
      ) as _i8.Future<_i3.TodoModel>);

  @override
  _i8.Future<_i3.TodoModel> updateTodo(_i3.TodoModel? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [todo],
        ),
        returnValue: _i8.Future<_i3.TodoModel>.value(_FakeTodoModel_1(
          this,
          Invocation.method(
            #updateTodo,
            [todo],
          ),
        )),
      ) as _i8.Future<_i3.TodoModel>);

  @override
  _i8.Future<void> deleteTodo(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [GetTodos].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTodos extends _i1.Mock implements _i15.GetTodos {
  MockGetTodos() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i11.Result<List<_i12.Todo>>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i8.Future<_i11.Result<List<_i12.Todo>>>.value(
            _i13.dummyValue<_i11.Result<List<_i12.Todo>>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i8.Future<_i11.Result<List<_i12.Todo>>>);
}

/// A class which mocks [GetTodoById].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTodoById extends _i1.Mock implements _i16.GetTodoById {
  MockGetTodoById() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i11.Result<_i12.Todo>> call(int? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i8.Future<_i11.Result<_i12.Todo>>.value(
            _i13.dummyValue<_i11.Result<_i12.Todo>>(
          this,
          Invocation.method(
            #call,
            [id],
          ),
        )),
      ) as _i8.Future<_i11.Result<_i12.Todo>>);
}

/// A class which mocks [UpdateTodo].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTodo extends _i1.Mock implements _i17.UpdateTodo {
  MockUpdateTodo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i11.Result<_i12.Todo>> call(_i12.Todo? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [todo],
        ),
        returnValue: _i8.Future<_i11.Result<_i12.Todo>>.value(
            _i13.dummyValue<_i11.Result<_i12.Todo>>(
          this,
          Invocation.method(
            #call,
            [todo],
          ),
        )),
      ) as _i8.Future<_i11.Result<_i12.Todo>>);
}

/// A class which mocks [TodosBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodosBloc extends _i1.Mock implements _i4.TodosBloc {
  MockTodosBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TodosState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTodosState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.TodosState);

  @override
  _i8.Stream<_i4.TodosState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i4.TodosState>.empty(),
      ) as _i8.Stream<_i4.TodosState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i4.TodosEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i4.TodosEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i4.TodosState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i4.TodosEvent>(
    _i18.EventHandler<E, _i4.TodosState>? handler, {
    _i18.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i18.Transition<_i4.TodosEvent, _i4.TodosState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void onChange(_i18.Change<_i4.TodosState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i19.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i5.Resource<_i20.User>> call(_i19.LoginParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i8.Future<_i5.Resource<_i20.User>>.value(
            _FakeResource_3<_i20.User>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i8.Future<_i5.Resource<_i20.User>>);
}

/// A class which mocks [LogoutUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutUseCase extends _i1.Mock implements _i21.LogoutUseCase {
  MockLogoutUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i5.Resource<bool>> call(_i22.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i8.Future<_i5.Resource<bool>>.value(_FakeResource_3<bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i8.Future<_i5.Resource<bool>>);
}

/// A class which mocks [AuthBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthBloc extends _i1.Mock implements _i6.AuthBloc {
  MockAuthBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.AuthState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.AuthState);

  @override
  _i8.Stream<_i6.AuthState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i6.AuthState>.empty(),
      ) as _i8.Stream<_i6.AuthState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i6.AuthEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i6.AuthEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i6.AuthState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i6.AuthEvent>(
    _i18.EventHandler<E, _i6.AuthState>? handler, {
    _i18.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i18.Transition<_i6.AuthEvent, _i6.AuthState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void onChange(_i18.Change<_i6.AuthState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
